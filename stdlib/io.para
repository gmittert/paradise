module io
import stdlib.syscall

// fopen/fread returns a FILE*, but we'll just hack it in as i32* which
// is the same size
// foreign fopen(i8*, i8*): i32*
// foreign fread(i8*, i32, i32, i32*): i32
// foreign fseek(i32*, i32, i32): i32
// foreign ftell(i32*): i32
// foreign fclose(i32*): i32

I64 print(Str c) {
    return to_stdout(c);
}

I64 to_stdout(Str c) {
    return __sys_write(1, c);
}

I64 to_stderr(Str c) {
    return __sys_write(2, c);
}

I64 to_file(U64 f, Str c) {
    return __sys_write(f, c);
}

I64 printc(Char c) {
    Str s = [c];
    return to_stdout(s);
}

// str readfile(str fname, str mode) {
//     i32* f = fopen(fname, mode);
//     // Normally defined in stdio.h
//     i32 SEEK_SET = 0;
//     i32 SEEK_CUR = 1;
//     i32 SEEK_END = 2;
//     fseek(f, 0, SEEK_END);
//     i32 sz = ftell(f);
//     fseek(f, 0, SEEK_SET);
//     str s = mkStr(sz);
//     fread(s, 1, sz, f);
//     fclose(f);
//     return s;
// }